[
  {
    "task_id": "HumanEval/0",
    "prompt": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -\u003e bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n    \u003e\u003e\u003e has_close_elements([1.0, 2.0, 3.0], 0.5)\n    False\n    \u003e\u003e\u003e has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n    True\n    \"\"\"\n",
    "response": "Generated mock implementation:\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) \u003c threshold:\n                return True\n    return False",
    "success": true,
    "executed": true,
    "duration": 3708,
    "passed_tests": false
  },
  {
    "task_id": "HumanEval/1",
    "prompt": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -\u003e List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    \u003e\u003e\u003e separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n",
    "response": "Generated mock implementation:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result",
    "success": true,
    "executed": true,
    "duration": 10875,
    "passed_tests": false
  },
  {
    "task_id": "HumanEval/2",
    "prompt": "\n\ndef truncate_number(number: float) -\u003e float:\n    \"\"\" Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n    \u003e\u003e\u003e truncate_number(3.5)\n    0.5\n    \"\"\"\n",
    "response": "Generated mock implementation:\n    return number % 1.0",
    "success": true,
    "executed": true,
    "duration": 6625,
    "passed_tests": true
  }
]