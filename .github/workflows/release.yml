name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true
        default: 'v0.1.0'

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: linux-amd64
          - goos: linux
            goarch: arm64
            suffix: linux-arm64
          - goos: darwin
            goarch: amd64
            suffix: darwin-amd64
          - goos: darwin
            goarch: arm64
            suffix: darwin-arm64
          - goos: windows
            goarch: amd64
            suffix: windows-amd64.exe
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.24'

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
        VERSION: ${{ steps.version.outputs.VERSION }}
        CGO_ENABLED: 0
      run: |
        GIT_COMMIT=$(git rev-parse HEAD)
        BUILD_TIME=$(date -u '+%Y-%m-%dT%H:%M:%SZ')
        
        LDFLAGS="-s -w \
          -X 'alex/internal/version.Version=$VERSION' \
          -X 'alex/internal/version.GitCommit=$GIT_COMMIT' \
          -X 'alex/internal/version.BuildTime=$BUILD_TIME'"
        
        mkdir -p dist
        
        if [ "${{ matrix.goos }}" = "windows" ]; then
          go build -ldflags "$LDFLAGS" -o "dist/alex-${{ matrix.suffix }}" ./cmd
        else
          go build -ldflags "$LDFLAGS" -o "dist/alex-${{ matrix.suffix }}" ./cmd
        fi

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: alex-${{ matrix.suffix }}
        path: dist/alex-${{ matrix.suffix }}
        
  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist

    - name: Prepare release assets
      run: |
        mkdir -p release
        find dist -name "alex-*" -type f -exec cp {} release/ \;
        ls -la release/
        
        # 创建校验文件
        cd release
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        name: Release ${{ steps.version.outputs.VERSION }}
        draft: false
        prerelease: false
        generate_release_notes: true
        files: release/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}