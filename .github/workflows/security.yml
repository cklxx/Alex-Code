name: Security

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly security scans
    - cron: '0 2 * * 1'

env:
  GO_VERSION: '1.24'

jobs:
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@v1.0.4
        govulncheck ./...

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    permissions:
      security-events: write
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Install Gosec
      run: go install github.com/securecodewarrior/gosec/cmd/gosec@latest
        
    - name: Run Gosec Security Scanner
      run: gosec -fmt sarif -out gosec.sarif ./...
        
    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec.sarif

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Build
      run: go build -v ./...
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Dependency Review
      uses: actions/dependency-review-action@v3

  secrets-scan:
    name: Secrets Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Run TruffleHog OSS (PR)
      if: github.event_name == 'pull_request'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: ${{ github.event.repository.default_branch }}
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Run TruffleHog OSS (Push)
      if: github.event_name == 'push'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: HEAD~1
        head: HEAD
        extra_args: --debug --only-verified
        
    - name: Run TruffleHog OSS (Full Scan)
      if: github.event_name == 'schedule'
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        extra_args: --debug --only-verified

  supply-chain-security:
    name: Supply Chain Security
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Generate SBOM
      uses: anchore/sbom-action@v0
      with:
        path: ./
        format: spdx-json
        
    - name: Scan SBOM for vulnerabilities
      uses: anchore/scan-action@v3
      with:
        sbom: "sbom.spdx.json"

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Check out code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        
    - name: Check licenses
      run: |
        # Check that we only use approved licenses
        go install github.com/google/go-licenses@latest
        go-licenses check ./...
        
    - name: Generate license report
      run: |
        go-licenses report ./... > licenses.txt
        cat licenses.txt
        
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: licenses.txt